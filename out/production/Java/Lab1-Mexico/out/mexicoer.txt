
import java.util.*;

import static java.lang.System.*;
import static java.lang.Math.*;

/*
 *  The Mexico dice game
 *  See https://en.wikipedia.org/wiki/Mexico_(game)
 *
 */
public class Main {

    public static void main(String[] args) {
        new Main().program();
    }

    final SplittableRandom rand = new SplittableRandom();
    final Scanner sc = new Scanner(in);
    final int maxRolls = 3; // No player may exceed this
    final int startAmount = 3; // Money for a player. Select any
    final int mexico = 1000; // A value greater than any other
    int playerCount = 3;

    void program() {
        // test(); // <----------------- UNCOMMENT to test

        int pot = 0;            // What the winner will get
        Player[] players;       // The players (array of Player objects)
        Player current;         // Current player for round
        Player loser;          // Player starting the round

        players = getPlayers();
        playerCount = players.length;
        current = getRandomPlayer(players);
        loser = current;

        out.println("Mexico Game Started");
        statusMsg(players);

        while(players.length > 1){
            loser.nRolls = (loser.nRolls != 0) ? loser.nRolls : maxRolls;

            for(int i = 1; i <= loser.nRolls; i++){
                roll(current);
                roundMsg(current);

                String cmd = getPlayerChoice(current);
                if(Objects.equals(cmd, "n")){
                    current.nRolls = i;
                    break;
                }
                else if(Objects.equals(cmd, "r")){
                    if(i == loser.nRolls){
                        out.println("-------- BOOGIE BREAK --------");
                    }
                }
                else {
                    out.println("Elon Snusk hade inte varit stolt");
                }
            }

            if(allRolled(players)){
                current = getLoser(players);
                loser = current;
                loser.amount--;
                pot++;
                out.println("---| Round done " + current.name + " lost! |---");

                if(loser.amount <= 0){
                    players = removeLoser(loser, players);
                }

                for (Player player : players) {
                    player.nRolls = 0;
                }
            }
            else{
                current = next(players, current);
            }

            statusMsg(players);
        }

        out.println("Game Over, winner is " + players[0].name + ". Will get " + pot + " from pot");
    }

    // ---- Game logic methods --------------

    Player[] removeLoser(Player loser, Player[] players){
        if(players.length <= 1){
            throw new IllegalArgumentException("FUCKY WUCKY");
        }
        Player[] plrs = new Player[players.length-1];
        int j = 0;
        for (Player player : players) {
            if (player.amount > 0) {
                plrs[j] = player;
                j++;
            }
        }
        return plrs;
    }
//    Player[] RemoveLosers(Player[] players){
//        ArrayList<Player> plrs = new ArrayList<Player>(List.of(players));
//        plrs.removeIf(p -> p.amount == 0);
//        return plrs.toArray(new Player[0]);
//    }
//    Player[] removeLoser(Player[] players){
//        Player[] plrs = new Player[players.length-1];
//        int counter = 0;
//
//        for(int i = 0; i < players.length; i++){
//            if(players[i].amount != 0){
//            plrs[counter] = players[i];
//            counter++;
//
//            }
//        }
//        return plrs;
//    }

    Player next(Player[] players, Player player){
        return players[(indexOf(players, player) + 1) % playerCount];
    }
    int getScore(Player player){
        if(player.fstDice == 2 && player.secDice == 1){
            return mexico;
        }
        return player.fstDice * 10 + player.secDice;
    }


    Player getLoser(Player[] players){
        Player player = players[0];

        for(int i = 1; i < players.length; i++){
            if(getScore(players[i]) < getScore(player)){
                player = players[i];
            }
        }
        return player;
    }

    boolean allRolled(Player[] players){
        for(int i = 0; i < players.length; i++){
            if(players[i].nRolls == 0){
                return false;
            }
        }
        return true;
    }
    void roll(Player player){
        int d1 = rand.nextInt(1,7);
        int d2 = rand.nextInt(1,7);
        if(d1 >= d2){
            player.fstDice = d1;
            player.secDice = d2;
        }
        else{
            player.fstDice = d2;
            player.secDice = d1;
        }
    }

    // TODO implement and test methods (one at the time)

    int indexOf(Player[] players, Player player) {
        for (int i = 0; i < players.length; i++) {
            if (players[i] == player) {
                return i;
            }
        }
        return -1;
    }

    Player getRandomPlayer(Player[] players) {
        return players[rand.nextInt(players.length)];
    }

    // ---------- IO methods (nothing to do here) -----------------------

    Player[] getPlayers() {
        return new Player[]{
                new Player("Tripp"),
                new Player("Trapp"),
                new Player("Trull")
        };
    }

    void statusMsg(Player[] players) {
        out.print("Status: ");
        for (int i = 0; i < players.length; i++) {
            out.print(players[i].name + " " + players[i].amount + " ");
        }
        out.println();
    }

    void roundMsg(Player current) {
        out.println("|-    " + current.name + " got " + current.fstDice + " and " + current.secDice + "    -|");
    }

    String getPlayerChoice(Player player) {
        out.print("Player is " + player.name + " > ");
        return sc.nextLine();
    }

    // Possibly useful utility during development
    String toString(Player p) {
        return p.name + ", " + p.amount + ", " + p.fstDice + ", " + p.secDice + ", " + p.nRolls;
    }

    // Class for a player
    class Player {
        String name;
        int amount; // Start amount (money)
        int fstDice; // Result of first dice
        int secDice; // Result of second dice
        int nRolls; // Current number of rolls

        public Player(String str, int a){
            name = str;
            amount = a;
            nRolls = 0;
        }
        public Player(String str){
            name = str;
            amount = startAmount;
            nRolls = 0;
        }
    }

    /**************************************************
     * Testing
     * <p>
     * Test are logical expressions that should evaluate to true (and then be
     * written out) No testing of IO methods Uncomment in program() to run test
     * (only)
     ***************************************************/
    void test() {
        // A few hard coded player to use for test
        // NOTE: Possible to debug tests from here, very efficient!
        Player[] ps = {
                new Player("Ole"),
                new Player("Dole"),
                new Player("Doff")
        };
        ps[0].fstDice = 2;
        ps[0].secDice = 6;
        ps[1].fstDice = 6;
        ps[1].secDice = 5;
        ps[2].fstDice = 1;
        ps[2].secDice = 1;

        // out.println(getScore(ps[0]) == 62);
        // out.println(getScore(ps[1]) == 65);
        // out.println(next(ps, ps[0]) == ps[1]);
        // out.println(getLoser(ps) == ps[0]);

        exit(0);
    }

}
/*            roll(current);
            roundMsg(current);
            current.nRolls++;

            loser.nRolls = maxRolls;

            for(int i = 1; i <= loser.nRolls; i++){
                String cmd = getPlayerChoice(current);
                if("r".equals(cmd)){
                    roll(current);

                    roundMsg(current);
                }
                else if("n".equals(cmd)){
                    current.nRolls = i;
                    break;
                }
                else{ // In case of invalid input - TODO: Decide if code should crash or print this fucky wucky shite, or do something else
                    out.println("Elon Snusk hade inte varit stolt");
                }*/
